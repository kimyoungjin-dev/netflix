[{"/Users/kimyoungjing/Desktop/netflix/src/index.js":"1","/Users/kimyoungjing/Desktop/netflix/src/Components/App.js":"2","/Users/kimyoungjing/Desktop/netflix/src/Components/Router.js":"3","/Users/kimyoungjing/Desktop/netflix/src/Components/Header.js":"4","/Users/kimyoungjing/Desktop/netflix/src/Components/GlobalStyles.js":"5","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/index.js":"6","/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/index.js":"7","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/index.js":"8","/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVContainer.js":"9","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContainer.js":"10","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchContainer.js":"11","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailPresenter.js":"12","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchPresenter.js":"13","/Users/kimyoungjing/Desktop/netflix/src/api.js":"14","/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVPresenter.js":"15","/Users/kimyoungjing/Desktop/netflix/src/Components/Section.js":"16","/Users/kimyoungjing/Desktop/netflix/src/Components/Loader.js":"17","/Users/kimyoungjing/Desktop/netflix/src/Components/Massage.js":"18","/Users/kimyoungjing/Desktop/netflix/src/Components/Poster.js":"19","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContents.js":"20","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/Backdrop.js":"21","/Users/kimyoungjing/Desktop/netflix/src/Components/Creadit.js":"22","/Users/kimyoungjing/Desktop/netflix/src/Components/help.js":"23","/Users/kimyoungjing/Desktop/netflix/src/Components/Help.js":"24","/Users/kimyoungjing/Desktop/netflix/src/Components/ShowEpisode.js":"25","/Users/kimyoungjing/Desktop/netflix/src/Components/Season.js":"26","/Users/kimyoungjing/Desktop/netflix/src/Components/MovieEpisode.js":"27","/Users/kimyoungjing/Desktop/netflix/src/Components/Overview.js":"28","/Users/kimyoungjing/Desktop/netflix/src/Components/Review.js":"29","/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/index.js":"30","/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingContainer.js":"31","/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingPresenter.js":"32","/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/index.js":"33","/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingContainer.js":"34","/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingPresenter.js":"35","/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/index.js":"36","/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MovieContainer.js":"37","/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MoviePresenter.js":"38","/Users/kimyoungjing/Desktop/netflix/src/Routes/Home.js":"39","/Users/kimyoungjing/Desktop/netflix/src/Components/PageTitle.js":"40","/Users/kimyoungjing/Desktop/netflix/src/Components/LinkPath.js":"41"},{"size":226,"mtime":1618856615997,"results":"42","hashOfConfig":"43"},{"size":322,"mtime":1618856956991,"results":"44","hashOfConfig":"43"},{"size":1131,"mtime":1618856615994,"results":"45","hashOfConfig":"43"},{"size":2197,"mtime":1618858941799,"results":"46","hashOfConfig":"43"},{"size":575,"mtime":1618856615993,"results":"47","hashOfConfig":"43"},{"size":82,"mtime":1618856615995,"results":"48","hashOfConfig":"43"},{"size":70,"mtime":1618856615996,"results":"49","hashOfConfig":"43"},{"size":82,"mtime":1618856615996,"results":"50","hashOfConfig":"43"},{"size":1205,"mtime":1618856615996,"results":"51","hashOfConfig":"43"},{"size":1556,"mtime":1618856615995,"results":"52","hashOfConfig":"43"},{"size":1634,"mtime":1618856615996,"results":"53","hashOfConfig":"43"},{"size":2259,"mtime":1618857246176,"results":"54","hashOfConfig":"43"},{"size":3537,"mtime":1618857361467,"results":"55","hashOfConfig":"43"},{"size":1348,"mtime":1618856615996,"results":"56","hashOfConfig":"43"},{"size":2285,"mtime":1618857324180,"results":"57","hashOfConfig":"43"},{"size":647,"mtime":1618858773224,"results":"58","hashOfConfig":"43"},{"size":1049,"mtime":1618856615994,"results":"59","hashOfConfig":"43"},{"size":1302,"mtime":1618856615994,"results":"60","hashOfConfig":"43"},{"size":1869,"mtime":1618858810113,"results":"61","hashOfConfig":"43"},{"size":5329,"mtime":1618856615995,"results":"62","hashOfConfig":"43"},{"size":894,"mtime":1618856615995,"results":"63","hashOfConfig":"43"},{"size":2607,"mtime":1618856615993,"results":"64","hashOfConfig":"43"},{"size":3493,"mtime":1613791127589,"results":"65","hashOfConfig":"66"},{"size":3629,"mtime":1618856615994,"results":"67","hashOfConfig":"43"},{"size":5229,"mtime":1618856615994,"results":"68","hashOfConfig":"43"},{"size":2532,"mtime":1618856615994,"results":"69","hashOfConfig":"43"},{"size":3355,"mtime":1618856615994,"results":"70","hashOfConfig":"43"},{"size":3836,"mtime":1618856615994,"results":"71","hashOfConfig":"43"},{"size":3596,"mtime":1618856615994,"results":"72","hashOfConfig":"43"},{"size":93,"mtime":1618856615996,"results":"73","hashOfConfig":"43"},{"size":817,"mtime":1618856615995,"results":"74","hashOfConfig":"43"},{"size":1228,"mtime":1618857629582,"results":"75","hashOfConfig":"43"},{"size":94,"mtime":1618856615996,"results":"76","hashOfConfig":"43"},{"size":800,"mtime":1618856615996,"results":"77","hashOfConfig":"43"},{"size":1182,"mtime":1618857655721,"results":"78","hashOfConfig":"43"},{"size":79,"mtime":1618856615995,"results":"79","hashOfConfig":"43"},{"size":1224,"mtime":1618856615995,"results":"80","hashOfConfig":"43"},{"size":2304,"mtime":1618857328663,"results":"81","hashOfConfig":"43"},{"size":2944,"mtime":1618856881277,"results":"82","hashOfConfig":"43"},{"size":194,"mtime":1618857209495,"results":"83","hashOfConfig":"43"},{"size":178,"mtime":1618857898739,"results":"84","hashOfConfig":"43"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"25q5fp",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"87"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"87"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"87"},{"filePath":"134","messages":"135","errorCount":4,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1t49pr1",{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"87"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"87"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"87"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"87"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"87"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"87"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"87"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kimyoungjing/Desktop/netflix/src/index.js",[],["179","180"],"/Users/kimyoungjing/Desktop/netflix/src/Components/App.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Router.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Header.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/GlobalStyles.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContainer.js",["181","182"],"import { movieApi, tvApi } from \"api\";\nimport React, { useEffect, useState } from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport styled from \"styled-components\";\nimport Backdrop from \"./Backdrop\";\nimport DetailContents from \"./DetailContents\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst DetailContainer = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n  return (\n    <Container>\n      <Backdrop result={result} loading={loading} error={error} />\n      <DetailPresenter result={result} loading={loading} error={error} />\n      <DetailContents\n        result={result}\n        loading={loading}\n        error={error}\n        props={props}\n      />\n    </Container>\n  );\n};\n\nexport default DetailContainer;\n","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailPresenter.js",["183"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loader from \"Components/Loader\";\nimport Massage from \"Components/Massage\";\nimport { Helmet } from \"react-helmet-async\";\nimport PageTitle from \"Components/PageTitle\";\n\nconst Container = styled.div`\n  position: relative;\n  height: 100vh;\n  width: 25%;\n  padding-left: 20px;\n  margin-right: 40px;\n`;\n\nconst CoverContainer = styled.div`\n  width: 400px;\n  height: 100%;\n`;\n\nconst Cover = styled.div`\n  background-image: url(${(props) => props.bgImage});\n  background-position: center;\n  background-size: cover;\n  width: 100%;\n  height: 80%;\n  position: relative;\n`;\n\nconst PosterTitle = styled.div`\n  font-size: 50px;\n`;\n\nconst Resume = styled.h1``;\n\nconst SubResume = styled.span`\n  font-size: 25px;\n`;\n\nconst LastEpisode = styled.h3`\n  margin-top: 10px;\n  color: auto;\n  opacity: 0.6;\n  font-size: 18px;\n  width: 100%;\n  height: 13.5%;\n  font-family: \"Truculenta\", sans-serif;\n`;\n\nconst DetailPresenter = ({ result, loading, error }) => {\n  return (\n    <>\n      {loading ? (\n        <>\n          <PageTitle title=\"MovieDetail\" />\n          <Loader />\n        </>\n      ) : result ? (\n        <Container>\n          <PageTitle\n            title={\n              result.original_title\n                ? result.original_title\n                : result.original_name\n            }\n          />\n\n          <CoverContainer>\n            <Cover\n              bgImage={`https://image.tmdb.org/t/p/original${result.poster_path}`}\n            />\n            <PosterTitle>\n              <Resume>Resume</Resume>\n              <SubResume>\n                {`${\n                  result.production_companies &&\n                  result.production_companies[0].name.substring(0, 30)\n                }...`}\n              </SubResume>\n            </PosterTitle>\n            <LastEpisode>\n              {result && result.tagline && result.tagline}\n            </LastEpisode>\n          </CoverContainer>\n\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      ) : null}\n    </>\n  );\n};\n\nDetailPresenter.propTypes = {\n  result: PropTypes.object,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n};\nexport default DetailPresenter;\n","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/api.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Section.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Loader.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Massage.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Poster.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContents.js",["184"],"import Loader from \"Components/Loader\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { AiFillStar } from \"react-icons/ai\";\nimport { Link, Route, withRouter } from \"react-router-dom\";\nimport Overview from \"Components/Overview\";\nimport MovieEpisode from \"Components/MovieEpisode\";\nimport ShowEpisode from \"Components/ShowEpisode\";\nimport Help from \"Components/Help\";\nimport Creadit from \"Components/Creadit\";\nimport Review from \"Components/Review\";\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst NetflexOriginal = styled.div`\n  font-family: \"Oswald\", sans-serif;\n  display: flex;\n`;\n\nconst Netflex = styled.div`\n  font-size: 70px;\n`;\n\nconst Original = styled.div`\n  font-size: 70px;\n  opacity: 0.6;\n  margin-left: 15px;\n`;\n\nconst Title = styled.div`\n  font-family: \"Reggae One\", cursive;\n  font-size: 60px;\n  margin: 40px 0px;\n  font-weight: 600;\n`;\n\nconst VoteContainer = styled.div`\n  position: absolute;\n  right: 30px;\n  top: 120px;\n  display: flex;\n  font-size: 55px;\n`;\n\nconst Vote = styled.div``;\n\nconst VoteIcon = styled.span`\n  color: yellow;\n  margin-left: 5px;\n`;\n\nconst ItemContainer = styled.div`\n  opacity: 0.6;\n  font-size: 20px;\n  margin-right: 10px;\n  display: flex;\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst Item = styled.div`\n  margin-right: 20px;\n  & span {\n    margin-right: 10px;\n  }\n`;\n\nconst RuntimeBtn = styled.button`\n  all: unset;\n  padding: 3px;\n  background: #c6ffdd;\n  background: -webkit-linear-gradient(to right, #f7797d, #fbd786, #c6ffdd);\n  background: linear-gradient(to right, #f7797d, #fbd786, #c6ffdd);\n  color: black;\n  border-radius: 10px;\n`;\nconst Tab = styled.div`\n  display: flex;\n`;\n\nconst TabTitle = styled.h2`\n  margin-right: 40px;\n  font-size: 30px;\n  font-family: \"Nunito\", sans-serif;\n  &:hover {\n    border-bottom: 2px solid red;\n    transition: 1s;\n    opacity: 0.7;\n  }\n`;\n\nconst DetailContents = ({\n  props: {\n    location: { pathname },\n  },\n  result,\n  loading,\n  error,\n}) => {\n  const isMovie = pathname.includes(\"movie\");\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <NetflexOriginal>\n            <Netflex>Netflex</Netflex>\n            <Original>Original</Original>\n          </NetflexOriginal>\n          <Title>\n            {result && result.original_name\n              ? result.original_name\n              : result.original_title}\n          </Title>\n          <VoteContainer>\n            <Vote> {result.vote_average} </Vote>\n            <VoteIcon>\n              <AiFillStar />\n            </VoteIcon>\n          </VoteContainer>\n          <ItemContainer>\n            <Item>\n              {result.first_air_date\n                ? result.first_air_date.substring(0, 4)\n                : result.release_date && result.release_date.substring(0, 4)}\n            </Item>\n            <Item>\n              {result.seasons\n                ? result.seasons.map((season) => <span>{season.name}</span>)\n                : \"First Season\"}\n            </Item>\n            <RuntimeBtn>\n              {result.episode_run_time && result.episode_run_time\n                ? result.episode_run_time\n                : result.runtime && result.runtime}\n              minutes\n            </RuntimeBtn>\n          </ItemContainer>\n\n          <Tab>\n            <Link\n              to={\n                isMovie\n                  ? `/movie/${result.id}/overview`\n                  : `/show/${result.id}/overview`\n              }\n            >\n              <TabTitle>Overview</TabTitle>\n            </Link>\n            <Link\n              to={\n                isMovie\n                  ? `/movie/${result.id}/movieepisode`\n                  : `/show/${result.id}/episode`\n              }\n            >\n              <TabTitle>{isMovie ? \"MovieEpisode\" : \"ShowEpisode\"}</TabTitle>\n            </Link>\n            <Link\n              to={\n                isMovie ? `/movie/${result.id}/help` : `/show/${result.id}/help`\n              }\n            >\n              <TabTitle>Help</TabTitle>\n            </Link>\n\n            <Link\n              to={\n                isMovie\n                  ? `/movie/${result.id}/creadit`\n                  : `/show/${result.id}/creadit`\n              }\n            >\n              <TabTitle>Creadit</TabTitle>\n            </Link>\n\n            <Link\n              to={\n                isMovie\n                  ? `/movie/${result.id}/review`\n                  : `/show/${result.id}/review`\n              }\n            >\n              <TabTitle>Review</TabTitle>\n            </Link>\n          </Tab>\n\n          <Route\n            path={isMovie ? `/movie/:id/overview` : `/show/:id/overview`} //overview\n            component={Overview}\n          />\n\n          <Route path=\"/movie/:id/movieepisode\" component={MovieEpisode} />\n\n          <Route path=\"/show/:id/episode\" component={ShowEpisode} />\n\n          <Route\n            path={isMovie ? `/movie/:id/help` : `/show/:id/help`}\n            component={Help}\n          />\n\n          <Route\n            path={isMovie ? `/movie/:id/creadit` : `/show/:id/creadit`}\n            component={Creadit}\n          />\n\n          <Route\n            path={isMovie ? `/movie/:id/review` : `/show/:id/review`}\n            component={Review}\n          />\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default DetailContents;\n","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/Backdrop.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Creadit.js",["185","186"],"import { movieApi, tvApi } from \"api\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Loader from \"./Loader\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div``;\n\nconst CreaditContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Contents = styled.div`\n  width: 100px;\n  height: 100px;\n  margin-right: 15px;\n  margin-bottom: 85px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${(props) => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Name = styled.div`\n  font-size: 18px;\n  font-weight: 600;\n  text-align: center;\n  margin: 5px 0px;\n`;\n\nconst Character = styled.div`\n  font-size: 14px;\n  text-align: center;\n  opacity: 0.6;\n`;\n\nconst Creadit = (props) => {\n  const [creaditData, setCreaditData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getData = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const {\n          data: { cast },\n        } = await movieApi.movieCreadit(id);\n        setCreaditData(cast);\n      } else {\n        const {\n          data: { cast },\n        } = await tvApi.showCreadit(id);\n        setCreaditData(cast);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <CreaditContainer>\n            {creaditData\n              .filter((v, index) => index < 20)\n              .map((movie) => (\n                <Contents key={movie.id}>\n                  <Image\n                    bgImage={\n                      movie.profile_path === null\n                        ? require(\"../images/profile.jpeg\").default\n                        : `https://image.tmdb.org/t/p/original${movie.profile_path}`\n                    }\n                  />\n                  <Name>{movie.name}</Name>\n                  <Character>{movie.character}</Character>\n                </Contents>\n              ))}\n          </CreaditContainer>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Creadit;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/help.js",["187","188","189","190","191","192","193","194"],"/Users/kimyoungjing/Desktop/netflix/src/Components/Help.js",["195","196"],"import React, { useEffect, useState } from \"react\";\nimport Loader from \"Components/Loader\";\nimport { movieApi, tvApi } from \"api\";\nimport styled from \"styled-components\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div`\n  height: 31vh;\n`;\n\nconst Contents = styled.div``;\n\nconst Description = styled.h2`\n  font-size: 20px;\n  margin: 20px 0px;\n  line-height: 1.5;\n  padding-bottom: 12px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.4);\n`;\n\nconst TitleAContent = styled.div`\n  display: flex;\n  margin-bottom: 40px;\n  font-size: 24px;\n`;\n\nconst Title = styled.span``;\n\nconst Languages = styled.span`\n  margin-left: 10px;\n  opacity: 0.8;\n  & span {\n    margin-left: 29px;\n  }\n`;\n\nconst PosterTitle = styled.div`\n  font-size: 30px;\n  margin-right: 30px;\n  display: flex;\n  align-items: center;\n  font-family: \"Open Sans\", sans-serif;\n`;\n\nconst PosterContainer = styled.div`\n  display: flex;\n`;\n\nconst ImageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 200px;\n  height: 200px;\n`;\n\nconst Image = styled.div`\n  width: 150px;\n  height: 150px;\n  background-position: center center;\n  background-size: cover;\n  background-image: url(${(props) => props.bgImage});\n`;\n\nconst LogoName = styled.h3`\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nconst Help = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Contents>\n            <Description>\n              {result && result.overview && result.overview.substring(0, 500)}\n            </Description>\n\n            <TitleAContent>\n              <Title>자막지원</Title>\n              <Languages>\n                {result &&\n                  result.spoken_languages &&\n                  result.spoken_languages.map((i, index) => (\n                    <span key={index}>{i.name}</span>\n                  ))}\n              </Languages>\n            </TitleAContent>\n            <PosterContainer>\n              <PosterTitle>Poster</PosterTitle>\n\n              <ImageContainer>\n                <LogoName>\n                  {result && result.networks\n                    ? result.networks.map((logo) => logo.name)\n                    : result.title}\n                </LogoName>\n                <Image\n                  bgImage={`https://image.tmdb.org/t/p/original${\n                    result.networks\n                      ? result.networks.map((logo) => logo.logo_path)\n                      : result.poster_path\n                  }`}\n                />\n              </ImageContainer>\n            </PosterContainer>\n          </Contents>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Help;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/ShowEpisode.js",["197","198"],"import React, { useState, useEffect } from \"react\";\nimport Loader from \"Components/Loader\";\nimport { Link, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { VscTriangleDown } from \"react-icons/vsc\";\nimport Season from \"Components/Season\";\nimport { movieApi, tvApi } from \"api\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div`\n  color: white;\n  font-size: 18px;\n`;\n\nconst Contents = styled.div``;\n\nconst Description = styled.h2`\n  font-size: 20px;\n  margin: 20px 0px;\n  line-height: 1.5;\n  padding-bottom: 12px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.4);\n`;\n\nconst EpisodeAnecdotes = styled.div`\n  width: 99%;\n  display: flex;\n`;\n\nconst EpisodeBox = styled.div`\n  width: 40%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst List = styled.div`\n  display: flex;\n  margin-bottom: 50px;\n`;\n\nconst Title = styled.div`\n  font-size: 23px;\n`;\n\nconst TitleColor = styled.span`\n  margin-left: 9px;\n  opacity: 0.7;\n  margin-top: 3px;\n`;\n\nconst LastOverview = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 20vh;\n`;\n\nconst LastOverviewTitle = styled.div`\n  text-align: center;\n  margin-bottom: 10px;\n`;\n\nconst LastPostContainer = styled.div`\n  width: 20%;\n`;\n\nconst Image = styled.div`\n  border-radius: 10px;\n  background-image: url(${(props) => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  height: 100%;\n  width: 100%;\n`;\n\nconst SeasonContainer = styled.div``;\n\nconst SeansonTitleIcon = styled.div`\n  display: flex;\n`;\n\nconst SeasonTitle = styled.h2`\n  font-family: \"Roboto\", sans-serif;\n  font-size: 20px;\n`;\n\nconst SeasonIcon = styled.span`\n  margin-left: 5px;\n`;\n\nconst EpisodeContainer = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Contents>\n            <Description>\n              {result && result.overview && result.overview.substring(0, 300)}\n            </Description>\n            <EpisodeAnecdotes>\n              <EpisodeBox>\n                <List>\n                  <Title>Next Episode Air date</Title>\n                  <TitleColor>\n                    {result && result.next_episode_to_air\n                      ? result.next_episode_to_air.air_date\n                      : \"Not View\"}\n                  </TitleColor>\n                </List>\n\n                <List>\n                  <Title>Season Number</Title>\n                  <TitleColor>\n                    Next Season\n                    {result.next_episode_to_air\n                      ? result.next_episode_to_air.season_number\n                      : result.number_of_seasons}\n                  </TitleColor>\n                </List>\n\n                <List>\n                  <Title>Last Episode to air date</Title>\n                  <TitleColor>\n                    {result &&\n                      result.last_episode_to_air &&\n                      result.last_episode_to_air.air_date}\n                  </TitleColor>\n                </List>\n              </EpisodeBox>\n              <EpisodeBox>\n                <LastOverview>\n                  <LastOverviewTitle>마지막회 줄거리</LastOverviewTitle>\n                  <TitleColor>\n                    {`${\n                      result &&\n                      result.last_episode_to_air.overview.substring(0, 300)\n                    }...`}\n                  </TitleColor>\n                </LastOverview>\n              </EpisodeBox>\n\n              <LastPostContainer>\n                <Image\n                  bgImage={`https://image.tmdb.org/t/p/original${\n                    result && result.backdrop_path && result.backdrop_path\n                  }`}\n                />\n              </LastPostContainer>\n            </EpisodeAnecdotes>\n            <Link to={`/show/${result.id}/episode/season`}>\n              <SeasonContainer>\n                <SeansonTitleIcon>\n                  <SeasonTitle>All seasons View</SeasonTitle>\n                  <SeasonIcon>\n                    <VscTriangleDown />\n                  </SeasonIcon>\n                </SeansonTitleIcon>\n              </SeasonContainer>\n            </Link>\n            <Route component={Season} path=\"/show/:id/episode/season\" />\n          </Contents>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default EpisodeContainer;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/Season.js",["199","200","201"],"import React, { useState, useEffect } from \"react\";\nimport Loader from \"Components/Loader\";\nimport styled from \"styled-components\";\nimport { movieApi, tvApi } from \"api\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div``;\n\nconst SeasonContainer = styled.div`\n  display: flex;\n`;\nconst SeasonBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst Air_date = styled.div`\n  opacity: 0.8;\n`;\n\nconst SeasonContents = styled.div`\n  margin-right: 60px;\n`;\n\nconst Title = styled.div`\n  margin: 15px 0px;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 30px;\n`;\n\nconst Image = styled.div`\n  background-position: center center;\n  background-size: cover;\n  background-image: url(${(props) => props.bgImage});\n  height: 130px;\n  width: 230px;\n`;\n\nconst Season = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <SeasonContainer>\n            {result.seasons.map((show) => (\n              <SeasonContents key={show.id}>\n                <SeasonBox>\n                  <Title>{show.name}</Title>\n                  <Air_date>{show.air_date}</Air_date>\n                </SeasonBox>\n                <Image\n                  bgImage={\n                    show.poster_path === null\n                      ? require(\"../images/BlankPoster.jpg\").default\n                      : `https://image.tmdb.org/t/p/original${show.poster_path}`\n                  }\n                />\n              </SeasonContents>\n            ))}\n          </SeasonContainer>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Season;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/MovieEpisode.js",["202","203"],"import React, { useState, useEffect } from \"react\";\nimport { movieApi, tvApi } from \"api\";\nimport Loader from \"Components/Loader\";\nimport styled from \"styled-components\";\nimport { AiOutlineTrademarkCircle } from \"react-icons/ai\";\nimport { BiCameraMovie } from \"react-icons/bi\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div`\n  margin-top: 10px;\n`;\n\nconst Imdb = styled.a`\n  border-radius: 10px;\n  font-size: 20px;\n  background: #fdc830;\n  background: -webkit-linear-gradient(to right, #f37335, #fdc830);\n  background: linear-gradient(to right, #f37335, #fdc830);\n  padding: 5px;\n  color: black;\n`;\n\nconst OverviewTitle = styled.span`\n  display: flex;\n  font-size: 23px;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  & svg {\n    margin-right: 5px;\n  }\n`;\n\nconst Overview = styled.span`\n  font-size: 20px;\n  display: block;\n  opacity: 0.6;\n  line-height: 1.5;\n`;\n\nconst MovieProduction = styled.div`\n  display: flex;\n  margin: 20px 0px;\n  font-size: 30px;\n\n  & svg {\n    margin-right: 10px;\n  }\n`;\n\nconst ProductionCompanies = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  line-height: 2;\n  opacity: 0.7;\n`;\n\nconst CompanyName = styled.h3`\n  font-size: 20px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${(props) => props.bgImage});\n  height: 30px;\n  width: 30px;\n  background-position: center center;\n  background-size: cover;\n  border-radius: 100%;\n  margin-right: 10px;\n`;\n\nconst MovieEpisode = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Imdb\n            target=\"_blank\"\n            href={`https://www.imdb.com/title/${result.imdb_id}`}\n          >\n            Movie Preview\n          </Imdb>\n          <OverviewTitle>\n            <AiOutlineTrademarkCircle />\n            All the plot\n          </OverviewTitle>\n          <Overview> {`${result.overview.substring(0, 300)}...`}</Overview>\n          <MovieProduction>\n            <BiCameraMovie />\n            MovieProduction\n          </MovieProduction>\n          {result.production_companies.map((movie) => (\n            <ProductionCompanies key={movie.id}>\n              <Image\n                bgImage={`https://image.tmdb.org/t/p/original${movie.logo_path}`}\n              />\n              <CompanyName>{movie.name}</CompanyName>\n            </ProductionCompanies>\n          ))}\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default MovieEpisode;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/Overview.js",["204","205","206"],"import { movieApi, tvApi } from \"api\";\nimport React, { useEffect, useState } from \"react\";\nimport Loader from \"Components/Loader\";\nimport styled from \"styled-components\";\nimport { RiMovieLine } from \"react-icons/ri\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div``;\n\nconst Contents = styled.div``;\n\nconst Description = styled.h2`\n  font-size: 24px;\n  margin: 20px 0px;\n\n  line-height: 1.5;\n`;\n\nconst TitleAContent = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 14px;\n`;\n\nconst Title = styled.span`\n  font-size: 24px;\n`;\n\nconst Content = styled.span`\n  margin-left: 15px;\n  font-size: 20px;\n  opacity: 0.7;\n`;\n\nconst Genre = styled.span`\n  font-size: 20px;\n  opacity: 0.7;\n  margin-right: 10px;\n`;\nconst YoutubeContainer = styled.div`\n  width: 100%;\n  height: 300px;\n  margin-top: 30px;\n  display: flex;\n  flex-wrap: nowrap;\n`;\n\nconst YoutubeContents = styled.div`\n  margin-right: 10px;\n`;\n\nconst Site = styled.div`\n  font-size: 20px;\n  color: beige;\n  opacity: 0.7;\n  display: flex;\n  & svg {\n    margin-right: 10px;\n  }\n`;\n\nconst Name = styled.div`\n  margin: 10px 0px;\n`;\n\nconst Type = styled.div`\n  margin-bottom: 5px;\n`;\n\nconst OverviewContainer = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Contents>\n            <Description>\n              {`${\n                result && result.overview && result.overview.substring(0, 500)\n              }..`}\n            </Description>\n\n            <TitleAContent>\n              <Title>Created</Title>\n              <Content>\n                {result && result.production_companies.map((i) => i.name)}\n              </Content>\n            </TitleAContent>\n\n            <TitleAContent>\n              <Title>Producer</Title>\n              <Content>\n                {result &&\n                  result.production_companies.map((e) => e.origin_country)}\n              </Content>\n            </TitleAContent>\n\n            <TitleAContent>\n              <Title>Genres</Title>\n              <Content>\n                {result &&\n                  result.genres.map((genre, index) => (\n                    <Genre key={index}>{genre.name}</Genre>\n                  ))}\n              </Content>\n            </TitleAContent>\n          </Contents>\n          <YoutubeContainer>\n            {result.videos.results.map((i) => (\n              <a\n                key={i.id}\n                target=\"_blank\"\n                href={`https://youtube.com/watch?v=${i.key}`}\n              >\n                <YoutubeContents>\n                  <Site>\n                    <RiMovieLine />\n                    {i.site}\n                  </Site>\n                  <Name>{i.name}</Name>\n                  <Type>{i.type}</Type>\n                </YoutubeContents>\n              </a>\n            ))}\n          </YoutubeContainer>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default OverviewContainer;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/Review.js",["207","208"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { movieApi, tvApi } from \"api\";\nimport { AiFillStar } from \"react-icons/ai\";\nimport Loader from \"./Loader\";\nimport { IoListCircleSharp } from \"react-icons/io5\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div``;\n\nconst NoReview = styled.h1`\n  font-size: 40px;\n  height: 49.5vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Contents = styled.div`\n  margin-bottom: 30px;\n  display: flex;\n  justify-content: center;\n\n  flex-direction: column;\n  & svg {\n    margin-right: 5px;\n    font-size: 30px;\n    color: orange;\n  }\n`;\n\nconst Author = styled.h2`\n  margin-top: 60px;\n  font-size: 30px;\n  font-weight: 600;\n`;\n\nconst Image = styled.div`\n  background-image: url(${(props) => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  height: 50px;\n  width: 50px;\n  border-radius: 20px;\n  margin: 10px 0px;\n`;\n\nconst Content = styled.div`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 24px;\n`;\n\nconst CreatedAt = styled.span`\n  margin: 25px 0px;\n  font-size: 20px;\n`;\n\nconst Url = styled.a`\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\n\nconst Rating = styled.span`\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n`;\n\nconst Review = (props) => {\n  const [review, setReview] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getData = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const {\n          data: { results: review },\n        } = await movieApi.review(id);\n        setReview(review);\n      } else {\n        const {\n          data: { results: review },\n        } = await tvApi.review(id);\n        setReview(review);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          {review.length === 0 ? (\n            <NoReview>\"There are no reviews at all\"</NoReview>\n          ) : (\n            review.map((movie) => (\n              <Contents key={movie.id}>\n                <Author>Writer : {movie.author}</Author>\n                <Image\n                  bgImage={\n                    movie.author_details.avatar_path === null\n                      ? require(\"../images/profile.jpeg\").default\n                      : `https://image.tmdb.org/t/p/original${movie.author_details.avatar_path}`\n                  }\n                />\n                <Content>\n                  <IoListCircleSharp />\n                  {movie.content}\n                </Content>\n                <CreatedAt>{movie.created_at.substring(0, 10)}</CreatedAt>\n                <Url href={movie.url} target=\"_blank\">\n                  {movie.url}\n                </Url>\n                <Rating>\n                  {movie.author_details.rating}\n                  <AiFillStar />\n                </Rating>\n              </Contents>\n            ))\n          )}\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Review;\n","/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MovieContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MoviePresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Home.js",["209","210"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { trending } from \"api\";\nimport Loader from \"Components/Loader\";\nimport Massage from \"Components/Massage\";\n\nconst Container = styled.div``;\n\nconst LoginBtn = styled.button`\n  all: unset;\n  color: white;\n  padding: 4px;\n  position: fixed;\n  background-color: red;\n  right: 50px;\n  top: 100px;\n  width: 80px;\n  height: 30px;\n  text-align: center;\n  border-radius: 10px;\n  font-size: 20px;\n`;\nconst Contents = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100vh;\n  width: 100%;\n`;\n\nconst Title = styled.h1`\n  font-size: 80px;\n  font-weight: 600;\n`;\n\nconst SubTitle = styled.h2`\n  font-size: 30px;\n  margin: 20px 0px;\n`;\n\nconst FormMessage = styled.span`\n  font-size: 20px;\n  opacity: 0.9;\n  margin-bottom: 20px;\n`;\n\nconst Form = styled.form`\n  width: 600px;\n  height: 70px;\n  display: flex;\n`;\n\nconst Input = styled.input`\n  width: 75%;\n`;\n\nconst SubmitInput = styled.input`\n  all: unset;\n  padding: 3px;\n  color: white;\n  background-color: red;\n  width: 25%;\n  font-size: 30px;\n  text-align: center;\n  cursor: pointer;\n`;\n\nconst Home = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setValue(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    setValue(\"\");\n  };\n\n  const getMovies = async () => {\n    try {\n      const {\n        data: { results: movies },\n      } = await trending.movieTrending();\n      setMovies(movies);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <LoginBtn>로그인</LoginBtn>\n\n          <Contents>\n            <Title>영화, TV 프로그램을 무제한으로.</Title>\n            <SubTitle>\n              다양한 디바이스에서 시청하세요. 언제든 해지하실 수 있습니다.\n            </SubTitle>\n            <FormMessage>\n              시청할 준비가 되셨나요? 맴버십을 등록하거나 재시작하려면 이메일\n              주소를 입력하세요\n            </FormMessage>\n            <Form onSubmit={onSubmit}>\n              <Input\n                placeholder=\"이메일 주소\"\n                type=\"text\"\n                maxLength=\"40\"\n                onChange={onChange}\n                value={value}\n              />\n              <SubmitInput type=\"submit\" value=\"시작하기\" />\n            </Form>\n          </Contents>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/PageTitle.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/LinkPath.js",[],{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":15,"column":17,"nodeType":"217","messageId":"218","endLine":15,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":51,"column":6,"nodeType":"221","endLine":51,"endColumn":8,"suggestions":"222"},{"ruleId":"215","severity":1,"message":"223","line":6,"column":10,"nodeType":"217","messageId":"218","endLine":6,"endColumn":16},{"ruleId":"215","severity":1,"message":"224","line":5,"column":23,"nodeType":"217","messageId":"218","endLine":5,"endColumn":33},{"ruleId":"215","severity":1,"message":"216","line":45,"column":17,"nodeType":"217","messageId":"218","endLine":45,"endColumn":25},{"ruleId":"219","severity":1,"message":"225","line":85,"column":6,"nodeType":"221","endLine":85,"endColumn":8,"suggestions":"226"},{"ruleId":"215","severity":1,"message":"227","line":4,"column":8,"nodeType":"217","messageId":"218","endLine":4,"endColumn":21},{"ruleId":"228","severity":2,"message":"229","line":71,"column":31,"nodeType":"217","endLine":71,"endColumn":39},{"ruleId":"228","severity":2,"message":"229","line":72,"column":33,"nodeType":"217","endLine":72,"endColumn":41},{"ruleId":"215","severity":1,"message":"230","line":73,"column":10,"nodeType":"217","messageId":"218","endLine":73,"endColumn":15},{"ruleId":"215","severity":1,"message":"216","line":73,"column":17,"nodeType":"217","messageId":"218","endLine":73,"endColumn":25},{"ruleId":"228","severity":2,"message":"229","line":73,"column":29,"nodeType":"217","endLine":73,"endColumn":37},{"ruleId":"228","severity":2,"message":"231","line":75,"column":3,"nodeType":"217","endLine":75,"endColumn":12},{"ruleId":"219","severity":1,"message":"220","line":77,"column":6,"nodeType":"221","endLine":77,"endColumn":8,"suggestions":"232"},{"ruleId":"215","severity":1,"message":"216","line":75,"column":17,"nodeType":"217","messageId":"218","endLine":75,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":79,"column":6,"nodeType":"221","endLine":79,"endColumn":8,"suggestions":"233"},{"ruleId":"215","severity":1,"message":"216","line":94,"column":17,"nodeType":"217","messageId":"218","endLine":94,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":130,"column":6,"nodeType":"221","endLine":130,"endColumn":8,"suggestions":"234"},{"ruleId":"215","severity":1,"message":"216","line":43,"column":17,"nodeType":"217","messageId":"218","endLine":43,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":79,"column":6,"nodeType":"221","endLine":79,"endColumn":8,"suggestions":"235"},{"ruleId":"236","severity":1,"message":"237","line":92,"column":19,"nodeType":"238","endLine":92,"endColumn":29},{"ruleId":"215","severity":1,"message":"216","line":75,"column":17,"nodeType":"217","messageId":"218","endLine":75,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":111,"column":6,"nodeType":"221","endLine":111,"endColumn":8,"suggestions":"239"},{"ruleId":"215","severity":1,"message":"216","line":73,"column":17,"nodeType":"217","messageId":"218","endLine":73,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":109,"column":6,"nodeType":"221","endLine":109,"endColumn":8,"suggestions":"240"},{"ruleId":"241","severity":1,"message":"242","line":150,"column":15,"nodeType":"238","endLine":154,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":76,"column":17,"nodeType":"217","messageId":"218","endLine":76,"endColumn":25},{"ruleId":"219","severity":1,"message":"225","line":116,"column":6,"nodeType":"221","endLine":116,"endColumn":8,"suggestions":"243"},{"ruleId":"215","severity":1,"message":"216","line":71,"column":17,"nodeType":"217","messageId":"218","endLine":71,"endColumn":25},{"ruleId":"215","severity":1,"message":"244","line":72,"column":10,"nodeType":"217","messageId":"218","endLine":72,"endColumn":16},"no-native-reassign",["245"],"no-negated-in-lhs",["246"],"no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDetail'. Either include it or remove the dependency array.","ArrayExpression",["247"],"'Helmet' is defined but never used.","'withRouter' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["248"],"'HelpPresenter' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"help\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'error' is assigned a value but never used.","React Hook \"useEffect\" is called in function \"help\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.",["249"],["250"],["251"],["252"],"react/jsx-pascal-case","Imported JSX component Air_date must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement",["253"],["254"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener",["255"],"'movies' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"256","fix":"260"},{"desc":"256","fix":"261"},{"desc":"256","fix":"262"},{"desc":"256","fix":"263"},{"desc":"256","fix":"264"},{"desc":"256","fix":"265"},{"desc":"258","fix":"266"},"Update the dependencies array to be: [getDetail]",{"range":"267","text":"268"},"Update the dependencies array to be: [getData]",{"range":"269","text":"270"},{"range":"271","text":"268"},{"range":"272","text":"268"},{"range":"273","text":"268"},{"range":"274","text":"268"},{"range":"275","text":"268"},{"range":"276","text":"268"},{"range":"277","text":"270"},[1200,1202],"[getDetail]",[1728,1730],"[getData]",[1498,1500],[1552,1554],[2571,2573],[1673,1675],[2323,2325],[2054,2056],[2316,2318]]