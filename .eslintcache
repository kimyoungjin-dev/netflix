[{"/Users/kimyoungjing/Desktop/netflix/src/index.js":"1","/Users/kimyoungjing/Desktop/netflix/src/Components/App.js":"2","/Users/kimyoungjing/Desktop/netflix/src/Components/Router.js":"3","/Users/kimyoungjing/Desktop/netflix/src/Components/Header.js":"4","/Users/kimyoungjing/Desktop/netflix/src/Components/GlobalStyles.js":"5","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/index.js":"6","/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/index.js":"7","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/index.js":"8","/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVContainer.js":"9","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContainer.js":"10","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchContainer.js":"11","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailPresenter.js":"12","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchPresenter.js":"13","/Users/kimyoungjing/Desktop/netflix/src/api.js":"14","/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVPresenter.js":"15","/Users/kimyoungjing/Desktop/netflix/src/Components/Section.js":"16","/Users/kimyoungjing/Desktop/netflix/src/Components/Loader.js":"17","/Users/kimyoungjing/Desktop/netflix/src/Components/Massage.js":"18","/Users/kimyoungjing/Desktop/netflix/src/Components/Poster.js":"19","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContents.js":"20","/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/Backdrop.js":"21","/Users/kimyoungjing/Desktop/netflix/src/Components/Creadit.js":"22","/Users/kimyoungjing/Desktop/netflix/src/Components/help.js":"23","/Users/kimyoungjing/Desktop/netflix/src/Components/Help.js":"24","/Users/kimyoungjing/Desktop/netflix/src/Components/ShowEpisode.js":"25","/Users/kimyoungjing/Desktop/netflix/src/Components/Season.js":"26","/Users/kimyoungjing/Desktop/netflix/src/Components/MovieEpisode.js":"27","/Users/kimyoungjing/Desktop/netflix/src/Components/Overview.js":"28","/Users/kimyoungjing/Desktop/netflix/src/Components/Review.js":"29","/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/index.js":"30","/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingContainer.js":"31","/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingPresenter.js":"32","/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/index.js":"33","/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingContainer.js":"34","/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingPresenter.js":"35","/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/index.js":"36","/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MovieContainer.js":"37","/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MoviePresenter.js":"38","/Users/kimyoungjing/Desktop/netflix/src/Routes/Home.js":"39"},{"size":226,"mtime":1613621628750,"results":"40","hashOfConfig":"41"},{"size":241,"mtime":1613805637533,"results":"42","hashOfConfig":"41"},{"size":1131,"mtime":1613814876646,"results":"43","hashOfConfig":"41"},{"size":2147,"mtime":1613999489218,"results":"44","hashOfConfig":"41"},{"size":575,"mtime":1613614290739,"results":"45","hashOfConfig":"41"},{"size":82,"mtime":1612533928365,"results":"46","hashOfConfig":"41"},{"size":70,"mtime":1612534258364,"results":"47","hashOfConfig":"41"},{"size":82,"mtime":1612534196967,"results":"48","hashOfConfig":"41"},{"size":1205,"mtime":1613820454691,"results":"49","hashOfConfig":"41"},{"size":1556,"mtime":1613815592016,"results":"50","hashOfConfig":"41"},{"size":1634,"mtime":1613820291625,"results":"51","hashOfConfig":"41"},{"size":2304,"mtime":1613999445771,"results":"52","hashOfConfig":"41"},{"size":3549,"mtime":1613820432840,"results":"53","hashOfConfig":"41"},{"size":1348,"mtime":1613803725416,"results":"54","hashOfConfig":"41"},{"size":2305,"mtime":1613820532423,"results":"55","hashOfConfig":"41"},{"size":647,"mtime":1613815116438,"results":"56","hashOfConfig":"41"},{"size":1049,"mtime":1613813667333,"results":"57","hashOfConfig":"41"},{"size":1302,"mtime":1612639207097,"results":"58","hashOfConfig":"41"},{"size":1848,"mtime":1613814599441,"results":"59","hashOfConfig":"41"},{"size":5329,"mtime":1613999522846,"results":"60","hashOfConfig":"41"},{"size":894,"mtime":1613815561649,"results":"61","hashOfConfig":"41"},{"size":2607,"mtime":1613820854477,"results":"62","hashOfConfig":"41"},{"size":3493,"mtime":1613791127589,"results":"63","hashOfConfig":"41"},{"size":3629,"mtime":1613820848890,"results":"64","hashOfConfig":"41"},{"size":5229,"mtime":1613820812019,"results":"65","hashOfConfig":"41"},{"size":2532,"mtime":1613820820271,"results":"66","hashOfConfig":"41"},{"size":3355,"mtime":1613820842408,"results":"67","hashOfConfig":"41"},{"size":3836,"mtime":1613820837167,"results":"68","hashOfConfig":"41"},{"size":3596,"mtime":1613999699774,"results":"69","hashOfConfig":"41"},{"size":93,"mtime":1613804205027,"results":"70","hashOfConfig":"41"},{"size":817,"mtime":1613820185378,"results":"71","hashOfConfig":"41"},{"size":1090,"mtime":1613820793610,"results":"72","hashOfConfig":"41"},{"size":94,"mtime":1613804690671,"results":"73","hashOfConfig":"41"},{"size":800,"mtime":1613820546204,"results":"74","hashOfConfig":"41"},{"size":1043,"mtime":1613820785870,"results":"75","hashOfConfig":"41"},{"size":79,"mtime":1613807941594,"results":"76","hashOfConfig":"41"},{"size":1224,"mtime":1613820094705,"results":"77","hashOfConfig":"41"},{"size":2323,"mtime":1613820162392,"results":"78","hashOfConfig":"41"},{"size":3505,"mtime":1613820801458,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1t49pr1",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":4,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},"/Users/kimyoungjing/Desktop/netflix/src/index.js",[],["167","168"],"/Users/kimyoungjing/Desktop/netflix/src/Components/App.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Router.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Header.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/GlobalStyles.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContainer.js",["169","170"],"import { movieApi, tvApi } from \"api\";\nimport React, { useEffect, useState } from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport styled from \"styled-components\";\nimport Backdrop from \"./Backdrop\";\nimport DetailContents from \"./DetailContents\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst DetailContainer = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n  return (\n    <Container>\n      <Backdrop result={result} loading={loading} error={error} />\n      <DetailPresenter result={result} loading={loading} error={error} />\n      <DetailContents\n        result={result}\n        loading={loading}\n        error={error}\n        props={props}\n      />\n    </Container>\n  );\n};\n\nexport default DetailContainer;\n","/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Search/SearchPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/api.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TV/TVPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Section.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Loader.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Massage.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Poster.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/DetailContents.js",["171"],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Detail/Backdrop.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Components/Creadit.js",["172","173"],"import { movieApi, tvApi } from \"api\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Loader from \"./Loader\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div``;\n\nconst CreaditContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Contents = styled.div`\n  width: 100px;\n  height: 100px;\n  margin-right: 15px;\n  margin-bottom: 85px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${(props) => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Name = styled.div`\n  font-size: 18px;\n  font-weight: 600;\n  text-align: center;\n  margin: 5px 0px;\n`;\n\nconst Character = styled.div`\n  font-size: 14px;\n  text-align: center;\n  opacity: 0.6;\n`;\n\nconst Creadit = (props) => {\n  const [creaditData, setCreaditData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getData = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const {\n          data: { cast },\n        } = await movieApi.movieCreadit(id);\n        setCreaditData(cast);\n      } else {\n        const {\n          data: { cast },\n        } = await tvApi.showCreadit(id);\n        setCreaditData(cast);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <CreaditContainer>\n            {creaditData\n              .filter((v, index) => index < 20)\n              .map((movie) => (\n                <Contents key={movie.id}>\n                  <Image\n                    bgImage={\n                      movie.profile_path === null\n                        ? require(\"../images/profile.jpeg\").default\n                        : `https://image.tmdb.org/t/p/original${movie.profile_path}`\n                    }\n                  />\n                  <Name>{movie.name}</Name>\n                  <Character>{movie.character}</Character>\n                </Contents>\n              ))}\n          </CreaditContainer>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Creadit;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/help.js",["174","175","176","177","178","179","180","181"],"/Users/kimyoungjing/Desktop/netflix/src/Components/Help.js",["182","183"],"import React, { useEffect, useState } from \"react\";\nimport Loader from \"Components/Loader\";\nimport { movieApi, tvApi } from \"api\";\nimport styled from \"styled-components\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div`\n  height: 31vh;\n`;\n\nconst Contents = styled.div``;\n\nconst Description = styled.h2`\n  font-size: 20px;\n  margin: 20px 0px;\n  line-height: 1.5;\n  padding-bottom: 12px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.4);\n`;\n\nconst TitleAContent = styled.div`\n  display: flex;\n  margin-bottom: 40px;\n  font-size: 24px;\n`;\n\nconst Title = styled.span``;\n\nconst Languages = styled.span`\n  margin-left: 10px;\n  opacity: 0.8;\n  & span {\n    margin-left: 29px;\n  }\n`;\n\nconst PosterTitle = styled.div`\n  font-size: 30px;\n  margin-right: 30px;\n  display: flex;\n  align-items: center;\n  font-family: \"Open Sans\", sans-serif;\n`;\n\nconst PosterContainer = styled.div`\n  display: flex;\n`;\n\nconst ImageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 200px;\n  height: 200px;\n`;\n\nconst Image = styled.div`\n  width: 150px;\n  height: 150px;\n  background-position: center center;\n  background-size: cover;\n  background-image: url(${(props) => props.bgImage});\n`;\n\nconst LogoName = styled.h3`\n  font-size: 30px;\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nconst Help = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Contents>\n            <Description>\n              {result && result.overview && result.overview.substring(0, 500)}\n            </Description>\n\n            <TitleAContent>\n              <Title>자막지원</Title>\n              <Languages>\n                {result &&\n                  result.spoken_languages &&\n                  result.spoken_languages.map((i, index) => (\n                    <span key={index}>{i.name}</span>\n                  ))}\n              </Languages>\n            </TitleAContent>\n            <PosterContainer>\n              <PosterTitle>Poster</PosterTitle>\n\n              <ImageContainer>\n                <LogoName>\n                  {result && result.networks\n                    ? result.networks.map((logo) => logo.name)\n                    : result.title}\n                </LogoName>\n                <Image\n                  bgImage={`https://image.tmdb.org/t/p/original${\n                    result.networks\n                      ? result.networks.map((logo) => logo.logo_path)\n                      : result.poster_path\n                  }`}\n                />\n              </ImageContainer>\n            </PosterContainer>\n          </Contents>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Help;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/ShowEpisode.js",["184","185"],"import React, { useState, useEffect } from \"react\";\nimport Loader from \"Components/Loader\";\nimport { Link, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { VscTriangleDown } from \"react-icons/vsc\";\nimport Season from \"Components/Season\";\nimport { movieApi, tvApi } from \"api\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div`\n  color: white;\n  font-size: 18px;\n`;\n\nconst Contents = styled.div``;\n\nconst Description = styled.h2`\n  font-size: 20px;\n  margin: 20px 0px;\n  line-height: 1.5;\n  padding-bottom: 12px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.4);\n`;\n\nconst EpisodeAnecdotes = styled.div`\n  width: 99%;\n  display: flex;\n`;\n\nconst EpisodeBox = styled.div`\n  width: 40%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst List = styled.div`\n  display: flex;\n  margin-bottom: 50px;\n`;\n\nconst Title = styled.div`\n  font-size: 23px;\n`;\n\nconst TitleColor = styled.span`\n  margin-left: 9px;\n  opacity: 0.7;\n  margin-top: 3px;\n`;\n\nconst LastOverview = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 20vh;\n`;\n\nconst LastOverviewTitle = styled.div`\n  text-align: center;\n  margin-bottom: 10px;\n`;\n\nconst LastPostContainer = styled.div`\n  width: 20%;\n`;\n\nconst Image = styled.div`\n  border-radius: 10px;\n  background-image: url(${(props) => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  height: 100%;\n  width: 100%;\n`;\n\nconst SeasonContainer = styled.div``;\n\nconst SeansonTitleIcon = styled.div`\n  display: flex;\n`;\n\nconst SeasonTitle = styled.h2`\n  font-family: \"Roboto\", sans-serif;\n  font-size: 20px;\n`;\n\nconst SeasonIcon = styled.span`\n  margin-left: 5px;\n`;\n\nconst EpisodeContainer = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Contents>\n            <Description>\n              {result && result.overview && result.overview.substring(0, 300)}\n            </Description>\n            <EpisodeAnecdotes>\n              <EpisodeBox>\n                <List>\n                  <Title>Next Episode Air date</Title>\n                  <TitleColor>\n                    {result && result.next_episode_to_air\n                      ? result.next_episode_to_air.air_date\n                      : \"Not View\"}\n                  </TitleColor>\n                </List>\n\n                <List>\n                  <Title>Season Number</Title>\n                  <TitleColor>\n                    Next Season\n                    {result.next_episode_to_air\n                      ? result.next_episode_to_air.season_number\n                      : result.number_of_seasons}\n                  </TitleColor>\n                </List>\n\n                <List>\n                  <Title>Last Episode to air date</Title>\n                  <TitleColor>\n                    {result &&\n                      result.last_episode_to_air &&\n                      result.last_episode_to_air.air_date}\n                  </TitleColor>\n                </List>\n              </EpisodeBox>\n              <EpisodeBox>\n                <LastOverview>\n                  <LastOverviewTitle>마지막회 줄거리</LastOverviewTitle>\n                  <TitleColor>\n                    {`${\n                      result &&\n                      result.last_episode_to_air.overview.substring(0, 300)\n                    }...`}\n                  </TitleColor>\n                </LastOverview>\n              </EpisodeBox>\n\n              <LastPostContainer>\n                <Image\n                  bgImage={`https://image.tmdb.org/t/p/original${\n                    result && result.backdrop_path && result.backdrop_path\n                  }`}\n                />\n              </LastPostContainer>\n            </EpisodeAnecdotes>\n            <Link to={`/show/${result.id}/episode/season`}>\n              <SeasonContainer>\n                <SeansonTitleIcon>\n                  <SeasonTitle>All seasons View</SeasonTitle>\n                  <SeasonIcon>\n                    <VscTriangleDown />\n                  </SeasonIcon>\n                </SeansonTitleIcon>\n              </SeasonContainer>\n            </Link>\n            <Route component={Season} path=\"/show/:id/episode/season\" />\n          </Contents>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default EpisodeContainer;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/Season.js",["186","187","188"],"import React, { useState, useEffect } from \"react\";\nimport Loader from \"Components/Loader\";\nimport styled from \"styled-components\";\nimport { movieApi, tvApi } from \"api\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div``;\n\nconst SeasonContainer = styled.div`\n  display: flex;\n`;\nconst SeasonBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst Air_date = styled.div`\n  opacity: 0.8;\n`;\n\nconst SeasonContents = styled.div`\n  margin-right: 60px;\n`;\n\nconst Title = styled.div`\n  margin: 15px 0px;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 30px;\n`;\n\nconst Image = styled.div`\n  background-position: center center;\n  background-size: cover;\n  background-image: url(${(props) => props.bgImage});\n  height: 130px;\n  width: 230px;\n`;\n\nconst Season = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <SeasonContainer>\n            {result.seasons.map((show) => (\n              <SeasonContents key={show.id}>\n                <SeasonBox>\n                  <Title>{show.name}</Title>\n                  <Air_date>{show.air_date}</Air_date>\n                </SeasonBox>\n                <Image\n                  bgImage={\n                    show.poster_path === null\n                      ? require(\"../images/BlankPoster.jpg\").default\n                      : `https://image.tmdb.org/t/p/original${show.poster_path}`\n                  }\n                />\n              </SeasonContents>\n            ))}\n          </SeasonContainer>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Season;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/MovieEpisode.js",["189","190"],"import React, { useState, useEffect } from \"react\";\nimport { movieApi, tvApi } from \"api\";\nimport Loader from \"Components/Loader\";\nimport styled from \"styled-components\";\nimport { AiOutlineTrademarkCircle } from \"react-icons/ai\";\nimport { BiCameraMovie } from \"react-icons/bi\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div`\n  margin-top: 10px;\n`;\n\nconst Imdb = styled.a`\n  border-radius: 10px;\n  font-size: 20px;\n  background: #fdc830;\n  background: -webkit-linear-gradient(to right, #f37335, #fdc830);\n  background: linear-gradient(to right, #f37335, #fdc830);\n  padding: 5px;\n  color: black;\n`;\n\nconst OverviewTitle = styled.span`\n  display: flex;\n  font-size: 23px;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  & svg {\n    margin-right: 5px;\n  }\n`;\n\nconst Overview = styled.span`\n  font-size: 20px;\n  display: block;\n  opacity: 0.6;\n  line-height: 1.5;\n`;\n\nconst MovieProduction = styled.div`\n  display: flex;\n  margin: 20px 0px;\n  font-size: 30px;\n\n  & svg {\n    margin-right: 10px;\n  }\n`;\n\nconst ProductionCompanies = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  line-height: 2;\n  opacity: 0.7;\n`;\n\nconst CompanyName = styled.h3`\n  font-size: 20px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${(props) => props.bgImage});\n  height: 30px;\n  width: 30px;\n  background-position: center center;\n  background-size: cover;\n  border-radius: 100%;\n  margin-right: 10px;\n`;\n\nconst MovieEpisode = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Imdb\n            target=\"_blank\"\n            href={`https://www.imdb.com/title/${result.imdb_id}`}\n          >\n            Movie Preview\n          </Imdb>\n          <OverviewTitle>\n            <AiOutlineTrademarkCircle />\n            All the plot\n          </OverviewTitle>\n          <Overview> {`${result.overview.substring(0, 300)}...`}</Overview>\n          <MovieProduction>\n            <BiCameraMovie />\n            MovieProduction\n          </MovieProduction>\n          {result.production_companies.map((movie) => (\n            <ProductionCompanies key={movie.id}>\n              <Image\n                bgImage={`https://image.tmdb.org/t/p/original${movie.logo_path}`}\n              />\n              <CompanyName>{movie.name}</CompanyName>\n            </ProductionCompanies>\n          ))}\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default MovieEpisode;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/Overview.js",["191","192","193"],"import { movieApi, tvApi } from \"api\";\nimport React, { useEffect, useState } from \"react\";\nimport Loader from \"Components/Loader\";\nimport styled from \"styled-components\";\nimport { RiMovieLine } from \"react-icons/ri\";\nimport Massage from \"./Massage\";\n\nconst Container = styled.div``;\n\nconst Contents = styled.div``;\n\nconst Description = styled.h2`\n  font-size: 24px;\n  margin: 20px 0px;\n\n  line-height: 1.5;\n`;\n\nconst TitleAContent = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 14px;\n`;\n\nconst Title = styled.span`\n  font-size: 24px;\n`;\n\nconst Content = styled.span`\n  margin-left: 15px;\n  font-size: 20px;\n  opacity: 0.7;\n`;\n\nconst Genre = styled.span`\n  font-size: 20px;\n  opacity: 0.7;\n  margin-right: 10px;\n`;\nconst YoutubeContainer = styled.div`\n  width: 100%;\n  height: 300px;\n  margin-top: 30px;\n  display: flex;\n  flex-wrap: nowrap;\n`;\n\nconst YoutubeContents = styled.div`\n  margin-right: 10px;\n`;\n\nconst Site = styled.div`\n  font-size: 20px;\n  color: beige;\n  opacity: 0.7;\n  display: flex;\n  & svg {\n    margin-right: 10px;\n  }\n`;\n\nconst Name = styled.div`\n  margin: 10px 0px;\n`;\n\nconst Type = styled.div`\n  margin-bottom: 5px;\n`;\n\nconst OverviewContainer = (props) => {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const getDetail = async () => {\n    const {\n      history: { push },\n      match: {\n        params: { id },\n      },\n    } = props;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    const {\n      location: { pathname },\n    } = props;\n    const isMovie = pathname.includes(\"movie\");\n\n    try {\n      if (isMovie) {\n        const { data: result } = await movieApi.movieDetail(id);\n        setResult(result);\n      } else {\n        const { data: result } = await tvApi.showDetail(id);\n        setResult(result);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getDetail();\n  }, []);\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <Contents>\n            <Description>\n              {`${\n                result && result.overview && result.overview.substring(0, 500)\n              }..`}\n            </Description>\n\n            <TitleAContent>\n              <Title>Created</Title>\n              <Content>\n                {result && result.production_companies.map((i) => i.name)}\n              </Content>\n            </TitleAContent>\n\n            <TitleAContent>\n              <Title>Producer</Title>\n              <Content>\n                {result &&\n                  result.production_companies.map((e) => e.origin_country)}\n              </Content>\n            </TitleAContent>\n\n            <TitleAContent>\n              <Title>Genres</Title>\n              <Content>\n                {result &&\n                  result.genres.map((genre, index) => (\n                    <Genre key={index}>{genre.name}</Genre>\n                  ))}\n              </Content>\n            </TitleAContent>\n          </Contents>\n          <YoutubeContainer>\n            {result.videos.results.map((i) => (\n              <a\n                key={i.id}\n                target=\"_blank\"\n                href={`https://youtube.com/watch?v=${i.key}`}\n              >\n                <YoutubeContents>\n                  <Site>\n                    <RiMovieLine />\n                    {i.site}\n                  </Site>\n                  <Name>{i.name}</Name>\n                  <Type>{i.type}</Type>\n                </YoutubeContents>\n              </a>\n            ))}\n          </YoutubeContainer>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default OverviewContainer;\n","/Users/kimyoungjing/Desktop/netflix/src/Components/Review.js",["194","195"],"/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/MovieTrending/MovieTrendingPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/TVTrending/TVTrendingPresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/index.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MovieContainer.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Movie/MoviePresenter.js",[],"/Users/kimyoungjing/Desktop/netflix/src/Routes/Home.js",["196"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { trending } from \"api\";\nimport Loader from \"Components/Loader\";\nimport Massage from \"Components/Massage\";\n\nconst Container = styled.div``;\n\nconst BackDropBox = styled.div`\n  z-index: -1;\n  position: fixed;\n  height: 100vh;\n  width: 100%;\n`;\nconst BackDrop = styled.div`\n  background-image: url(${(props) => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  height: 100vh;\n  width: 100%;\n  filter: blur(3px);\n  z-index: -10;\n`;\n\nconst LoginBtn = styled.button`\n  all: unset;\n  color: white;\n  padding: 4px;\n  position: fixed;\n  background-color: red;\n  right: 50px;\n  top: 100px;\n  width: 80px;\n  height: 30px;\n  text-align: center;\n  border-radius: 10px;\n  font-size: 20px;\n`;\nconst Contents = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100vh;\n  width: 100%;\n`;\n\nconst Title = styled.h1`\n  font-size: 80px;\n  font-weight: 600;\n`;\n\nconst SubTitle = styled.h2`\n  font-size: 30px;\n  margin: 20px 0px;\n`;\n\nconst FormMessage = styled.span`\n  font-size: 20px;\n  opacity: 0.9;\n  margin-bottom: 20px;\n`;\n\nconst Form = styled.form`\n  width: 600px;\n  height: 70px;\n  display: flex;\n`;\n\nconst Input = styled.input`\n  width: 75%;\n`;\n\nconst SubmitInput = styled.input`\n  all: unset;\n  padding: 3px;\n  color: white;\n  background-color: red;\n  width: 25%;\n  font-size: 30px;\n  text-align: center;\n  cursor: pointer;\n`;\n\nconst Home = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setValue(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    setValue(\"\");\n  };\n\n  const getMovies = async () => {\n    try {\n      const {\n        data: { results: movies },\n      } = await trending.movieTrending();\n      setMovies(movies);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  const randomNumber = Math.floor(Math.random() * 1);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Container>\n          <LoginBtn>로그인</LoginBtn>\n          <BackDropBox>\n            <BackDrop\n              bgImage={`https://image.tmdb.org/t/p/original${movies[randomNumber].backdrop_path}`}\n            />\n          </BackDropBox>\n\n          <Contents>\n            <Title>영화, TV 프로그램을 무제한으로.</Title>\n            <SubTitle>\n              다양한 디바이스에서 시청하세요. 언제든 해지하실 수 있습니다.\n            </SubTitle>\n            <FormMessage>\n              시청할 준비가 되셨나요? 맴버십을 등록하거나 재시작하려면 이메일\n              주소를 입력하세요\n            </FormMessage>\n            <Form onSubmit={onSubmit}>\n              <Input\n                placeholder=\"이메일 주소\"\n                type=\"text\"\n                maxLength=\"40\"\n                onChange={onChange}\n                value={value}\n              />\n              <SubmitInput type=\"submit\" value=\"시작하기\" />\n            </Form>\n          </Contents>\n          {error && <Massage color=\"red\" text={error} />}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n",{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":15,"column":17,"nodeType":"203","messageId":"204","endLine":15,"endColumn":25},{"ruleId":"205","severity":1,"message":"206","line":51,"column":6,"nodeType":"207","endLine":51,"endColumn":8,"suggestions":"208"},{"ruleId":"201","severity":1,"message":"209","line":5,"column":23,"nodeType":"203","messageId":"204","endLine":5,"endColumn":33},{"ruleId":"201","severity":1,"message":"202","line":45,"column":17,"nodeType":"203","messageId":"204","endLine":45,"endColumn":25},{"ruleId":"205","severity":1,"message":"210","line":85,"column":6,"nodeType":"207","endLine":85,"endColumn":8,"suggestions":"211"},{"ruleId":"201","severity":1,"message":"212","line":4,"column":8,"nodeType":"203","messageId":"204","endLine":4,"endColumn":21},{"ruleId":"213","severity":2,"message":"214","line":71,"column":31,"nodeType":"203","endLine":71,"endColumn":39},{"ruleId":"213","severity":2,"message":"214","line":72,"column":33,"nodeType":"203","endLine":72,"endColumn":41},{"ruleId":"201","severity":1,"message":"215","line":73,"column":10,"nodeType":"203","messageId":"204","endLine":73,"endColumn":15},{"ruleId":"201","severity":1,"message":"202","line":73,"column":17,"nodeType":"203","messageId":"204","endLine":73,"endColumn":25},{"ruleId":"213","severity":2,"message":"214","line":73,"column":29,"nodeType":"203","endLine":73,"endColumn":37},{"ruleId":"213","severity":2,"message":"216","line":75,"column":3,"nodeType":"203","endLine":75,"endColumn":12},{"ruleId":"205","severity":1,"message":"206","line":77,"column":6,"nodeType":"207","endLine":77,"endColumn":8,"suggestions":"217"},{"ruleId":"201","severity":1,"message":"202","line":75,"column":17,"nodeType":"203","messageId":"204","endLine":75,"endColumn":25},{"ruleId":"205","severity":1,"message":"206","line":79,"column":6,"nodeType":"207","endLine":79,"endColumn":8,"suggestions":"218"},{"ruleId":"201","severity":1,"message":"202","line":94,"column":17,"nodeType":"203","messageId":"204","endLine":94,"endColumn":25},{"ruleId":"205","severity":1,"message":"206","line":130,"column":6,"nodeType":"207","endLine":130,"endColumn":8,"suggestions":"219"},{"ruleId":"201","severity":1,"message":"202","line":43,"column":17,"nodeType":"203","messageId":"204","endLine":43,"endColumn":25},{"ruleId":"205","severity":1,"message":"206","line":79,"column":6,"nodeType":"207","endLine":79,"endColumn":8,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":92,"column":19,"nodeType":"223","endLine":92,"endColumn":29},{"ruleId":"201","severity":1,"message":"202","line":75,"column":17,"nodeType":"203","messageId":"204","endLine":75,"endColumn":25},{"ruleId":"205","severity":1,"message":"206","line":111,"column":6,"nodeType":"207","endLine":111,"endColumn":8,"suggestions":"224"},{"ruleId":"201","severity":1,"message":"202","line":73,"column":17,"nodeType":"203","messageId":"204","endLine":73,"endColumn":25},{"ruleId":"205","severity":1,"message":"206","line":109,"column":6,"nodeType":"207","endLine":109,"endColumn":8,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":150,"column":15,"nodeType":"223","endLine":154,"endColumn":16},{"ruleId":"201","severity":1,"message":"202","line":76,"column":17,"nodeType":"203","messageId":"204","endLine":76,"endColumn":25},{"ruleId":"205","severity":1,"message":"210","line":116,"column":6,"nodeType":"207","endLine":116,"endColumn":8,"suggestions":"228"},{"ruleId":"201","severity":1,"message":"202","line":87,"column":17,"nodeType":"203","messageId":"204","endLine":87,"endColumn":25},"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDetail'. Either include it or remove the dependency array.","ArrayExpression",["231"],"'withRouter' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["232"],"'HelpPresenter' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"help\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'error' is assigned a value but never used.","React Hook \"useEffect\" is called in function \"help\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.",["233"],["234"],["235"],["236"],"react/jsx-pascal-case","Imported JSX component Air_date must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement",["237"],["238"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener",["239"],"no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"240","fix":"244"},{"desc":"240","fix":"245"},{"desc":"240","fix":"246"},{"desc":"240","fix":"247"},{"desc":"240","fix":"248"},{"desc":"240","fix":"249"},{"desc":"242","fix":"250"},"Update the dependencies array to be: [getDetail]",{"range":"251","text":"252"},"Update the dependencies array to be: [getData]",{"range":"253","text":"254"},{"range":"255","text":"252"},{"range":"256","text":"252"},{"range":"257","text":"252"},{"range":"258","text":"252"},{"range":"259","text":"252"},{"range":"260","text":"252"},{"range":"261","text":"254"},[1200,1202],"[getDetail]",[1728,1730],"[getData]",[1498,1500],[1552,1554],[2571,2573],[1673,1675],[2323,2325],[2054,2056],[2316,2318]]